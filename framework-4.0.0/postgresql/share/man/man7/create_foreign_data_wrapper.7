.\\" auto-generated by docbook2man-spec $Revision: 1.1.1.1 $
.TH "CREATE FOREIGN DATA WRAPPER" "7" "2009-06-27" "SQL - Language Statements" "SQL Commands"
.SH NAME
CREATE FOREIGN DATA WRAPPER \- define a new foreign-data wrapper

.SH SYNOPSIS
.sp
.nf
CREATE FOREIGN DATA WRAPPER \fIname\fR
    [ VALIDATOR \fIvalfunction\fR | NO VALIDATOR ]
    [ OPTIONS ( \fIoption\fR '\fIvalue\fR' [, ... ] ) ]
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBCREATE FOREIGN DATA WRAPPER\fR creates a new
foreign-data wrapper. The user who defines a foreign-data wrapper
becomes its owner.
.PP
The foreign-data wrapper name must be unique within the database.
.PP
Only superusers can create foreign-data wrappers.
.SH "PARAMETERS"
.TP
\fB\fIname\fB\fR
The name of the foreign-data wrapper to be created.
.TP
\fBVALIDATOR \fIvalfunction\fB\fR
\fIvalfunction\fR is the
name of a previously registered function that will be called to
check the generic options given to the foreign-data wrapper, as
well as to foreign servers and user mappings using the
foreign-data wrapper. If no validator function or NO
VALIDATOR is specified, then options will not be
checked at creation time. (Foreign-data wrappers will possibly
ignore or reject invalid option specifications at run time,
depending on the implementation.) The validator function must
take two arguments: one of type \fBtext[]\fR, which will
contain the array of options as stored in the system catalogs,
and one of type \fBoid\fR, which will be the OID of the
system catalog containing the options, or zero if the context is
not known. The return type is ignored; the function should
indicate invalid options using
the \fBereport()\fR function.
.TP
\fBOPTIONS ( \fIoption\fB '\fIvalue\fB' [, ... ] )\fR
This clause specifies options for the new foreign-data wrapper.
The allowed option names and values are specific to each foreign
data wrapper and are validated using the foreign-data wrapper
library. Option names must be unique.
.SH "NOTES"
.PP
At the moment, the foreign-data wrapper functionality is very
rudimentary. The purpose of foreign-data wrappers, foreign
servers, and user mappings is to store this information in a
standard way so that it can be queried by interested applications.
One such application is \fBdblink\fR;
see in the documentation. The functionality to actually query
external data through a foreign-data wrapper library does not exist
yet.
.PP
There is currently one foreign-data wrapper validator function
provided:
\fIpostgresql_fdw_validator\fR, which accepts
options corresponding to \fBlibpq\fR connection
parameters.
.SH "EXAMPLES"
.PP
Create a foreign-data wrapper dummy:
.sp
.nf
CREATE FOREIGN DATA WRAPPER dummy;
.sp
.fi
.PP
Create a foreign-data wrapper postgresql with
validator function postgresql_fdw_validator:
.sp
.nf
CREATE FOREIGN DATA WRAPPER postgresql VALIDATOR postgresql_fdw_validator;
.sp
.fi
.PP
Create a foreign-data wrapper mywrapper with some
options:
.sp
.nf
CREATE FOREIGN DATA WRAPPER mywrapper
    OPTIONS (debug 'true');
.sp
.fi
.SH "COMPATIBILITY"
.PP
\fBCREATE FOREIGN DATA WRAPPER\fR conforms to ISO/IEC
9075-9 (SQL/MED), with the exception that
the VALIDATOR clause is an extension and the
clauses LIBRARY and LANGUAGE
are not yet implemented in PostgreSQL.
.PP
Note, however, that the SQL/MED functionality as a whole is not yet
conforming.
.SH "SEE ALSO"
ALTER FOREIGN DATA WRAPPER [\fBalter_foreign_data_wrapper\fR(7)], DROP FOREIGN DATA WRAPPER [\fBdrop_foreign_data_wrapper\fR(7)], CREATE SERVER [\fBcreate_server\fR(7)], CREATE USER MAPPING [\fBcreate_user_mapping\fR(7)]
