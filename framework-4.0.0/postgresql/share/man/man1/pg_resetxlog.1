.\\" auto-generated by docbook2man-spec $Revision: 1.1.1.1 $
.TH "PG_RESETXLOG" "1" "2009-06-27" "Application" "PostgreSQL Server Applications"
.SH NAME
pg_resetxlog \- reset the write-ahead log and other control information of a PostgreSQL database cluster
.SH SYNOPSIS
.sp
\fBpg_resetxlog\fR [ \fB-f\fR ]  [ \fB-n\fR ]  [ \fB-o\fIoid\fB \fR ]  [ \fB-x \fIxid\fB \fR ]  [ \fB-e \fIxid_epoch\fB \fR ]  [ \fB-m \fImxid\fB \fR ]  [ \fB-O \fImxoff\fB \fR ]  [ \fB-l \fItimelineid\fB,\fIfileid\fB,\fIseg\fB \fR ]  \fB\fIdatadir\fB\fR
.SH "DESCRIPTION"
.PP
\fBpg_resetxlog\fR clears the write-ahead log (WAL) and
optionally resets some other control information stored in the
\fIpg_control\fR file. This function is sometimes needed
if these files have become corrupted. It should be used only as a
last resort, when the server will not start due to such corruption.
.PP
After running this command, it should be possible to start the server,
but bear in mind that the database might contain inconsistent data due to
partially-committed transactions. You should immediately dump your data,
run \fBinitdb\fR, and reload. After reload, check for
inconsistencies and repair as needed.
.PP
This utility can only be run by the user who installed the server, because
it requires read/write access to the data directory.
For safety reasons, you must specify the data directory on the command line.
\fBpg_resetxlog\fR does not use the environment variable
\fBPGDATA\fR.
.PP
If \fBpg_resetxlog\fR complains that it cannot determine
valid data for \fIpg_control\fR, you can force it to proceed anyway
by specifying the -f (force) switch. In this case plausible
values will be substituted for the missing data. Most of the fields can be
expected to match, but manual assistance might be needed for the next OID,
next transaction ID and epoch, next multitransaction ID and offset, and
WAL starting address fields. These fields can be set using the switches
discussed below. If you are not able to determine correct values for all
these fields, -f can still be used, but
the recovered database must be treated with even more suspicion than
usual: an immediate dump and reload is imperative. \fBDo not\fR
execute any data-modifying operations in the database before you dump,
as any such action is likely to make the corruption worse.
.PP
The -o, -x, -e,
-m, -O,
and -l
switches allow the next OID, next transaction ID, next transaction ID's
epoch, next multitransaction ID, next multitransaction offset, and WAL
starting address values to be set manually. These are only needed when
\fBpg_resetxlog\fR is unable to determine appropriate values
by reading \fIpg_control\fR. Safe values can be determined as
follows:
.TP 0.2i
\(bu
A safe value for the next transaction ID (-x)
can be determined by looking for the numerically largest
file name in the directory \fIpg_clog\fR under the data directory,
adding one,
and then multiplying by 1048576. Note that the file names are in
hexadecimal. It is usually easiest to specify the switch value in
hexadecimal too. For example, if \fI0011\fR is the largest entry
in \fIpg_clog\fR, -x 0x1200000 will work (five
trailing zeroes provide the proper multiplier).
.TP 0.2i
\(bu
A safe value for the next multitransaction ID (-m)
can be determined by looking for the numerically largest
file name in the directory \fIpg_multixact/offsets\fR under the
data directory, adding one, and then multiplying by 65536. As above,
the file names are in hexadecimal, so the easiest way to do this is to
specify the switch value in hexadecimal and add four zeroes.
.TP 0.2i
\(bu
A safe value for the next multitransaction offset (-O)
can be determined by looking for the numerically largest
file name in the directory \fIpg_multixact/members\fR under the
data directory, adding one, and then multiplying by 65536. As above,
the file names are in hexadecimal, so the easiest way to do this is to
specify the switch value in hexadecimal and add four zeroes.
.TP 0.2i
\(bu
The WAL starting address (-l) should be
larger than any WAL segment file name currently existing in
the directory \fIpg_xlog\fR under the data directory.
These names are also in hexadecimal and have three parts. The first
part is the ``timeline ID'' and should usually be kept the same.
Do not choose a value larger than 255 (0xFF) for the third
part; instead increment the second part and reset the third part to 0.
For example, if \fI00000001000000320000004A\fR is the
largest entry in \fIpg_xlog\fR, -l 0x1,0x32,0x4B will
work; but if the largest entry is
\fI000000010000003A000000FF\fR, choose -l 0x1,0x3B,0x0
or more.
.sp
.RS
.B "Note:"
\fBpg_resetxlog\fR itself looks at the files in
\fIpg_xlog\fR and chooses a default -l setting
beyond the last existing file name. Therefore, manual adjustment of
-l should only be needed if you are aware of WAL segment
files that are not currently present in \fIpg_xlog\fR, such as
entries in an offline archive; or if the contents of
\fIpg_xlog\fR have been lost entirely.
.RE
.sp
.TP 0.2i
\(bu
There is no comparably easy way to determine a next OID that's beyond
the largest one in the database, but fortunately it is not critical to
get the next-OID setting right.
.TP 0.2i
\(bu
The transaction ID epoch is not actually stored anywhere in the database
except in the field that is set by \fBpg_resetxlog\fR,
so any value will work so far as the database itself is concerned.
You might need to adjust this value to ensure that replication
systems such as \fBSlony-I\fR work correctly \(em
if so, an appropriate value should be obtainable from the state of
the downstream replicated database.
.PP
.PP
The -n (no operation) switch instructs
\fBpg_resetxlog\fR to print the values reconstructed from
\fIpg_control\fR and then exit without modifying anything.
This is mainly a debugging tool, but can be useful as a sanity check
before allowing \fBpg_resetxlog\fR to proceed for real.
.SH "NOTES"
.PP
This command must not be used when the server is 
running. \fBpg_resetxlog\fR will refuse to start up if
it finds a server lock file in the data directory. If the
server crashed then a lock file might have been left
behind; in that case you can remove the lock file to allow
\fBpg_resetxlog\fR to run. But before you do
so, make doubly certain that there is no server process still alive.
