.\\" auto-generated by docbook2man-spec $Revision: 1.1.1.1 $
.TH "POSTGRES" "1" "2009-06-27" "Application" "PostgreSQL Server Applications"
.SH NAME
postgres \- PostgreSQL database server

.SH SYNOPSIS
.sp
\fBpostgres\fR [ \fB\fIoption\fB\fR\fI...\fR ] 
.SH "DESCRIPTION"
.PP
\fBpostgres\fR is the
PostgreSQL database server. In order
for a client application to access a database it connects (over a
network or locally) to a running \fBpostgres\fR instance.
The \fBpostgres\fR instance then starts a separate server
process to handle the connection.
.PP
One \fBpostgres\fR instance always manages the data of
exactly one database cluster. A database cluster is a collection
of databases that is stored at a common file system location (the
``data area''). More than one
\fBpostgres\fR instance can run on a system at one
time, so long as they use different data areas and different
communication ports (see below). When
\fBpostgres\fR starts it needs to know the location
of the data area. The location must be specified by the
\fB-D\fR option or the \fBPGDATA\fR environment
variable; there is no default. Typically, \fB-D\fR or
\fBPGDATA\fR points directly to the data area directory
created by \fBinitdb\fR(1). Other possible file layouts are
discussed in in the documentation.
.PP
By default \fBpostgres\fR starts in the
foreground and prints log messages to the standard error stream. In
practical applications \fBpostgres\fR
should be started as a background process, perhaps at boot time.
.PP
The \fBpostgres\fR command can also be called in
single-user mode. The primary use for this mode is during
bootstrapping by \fBinitdb\fR(1). Sometimes it is used
for debugging or disaster recovery (but note that running a single-user
server is not truly suitable for debugging the server, since no
realistic interprocess communication and locking will happen).
When invoked in single-user
mode from the shell, the user can enter queries and the results
will be printed to the screen, but in a form that is more useful
for developers than end users. In the single-user mode,
the session user will be set to the user with ID 1, and implicit
superuser powers are granted to this user.
This user does not actually have to exist, so the single-user mode
can be used to manually recover from certain
kinds of accidental damage to the system catalogs.
.SH "OPTIONS"
.PP
\fBpostgres\fR accepts the following command-line
arguments. For a detailed discussion of the options consult in the documentation. You can save typing most of these
options by setting up a configuration file. Some (safe) options
can also be set from the connecting client in an
application-dependent way to apply only for that session. For
example, if the environment variable \fBPGOPTIONS\fR is
set, then \fBlibpq\fR-based clients will pass that
string to the server, which will interpret it as
\fBpostgres\fR command-line options.
.SS "GENERAL PURPOSE"
.TP
\fB-A 0|1\fR
Enables run-time assertion checks, which is a debugging aid to
detect programming mistakes. This option is only available if
assertions were enabled when PostgreSQL was
compiled. If so, the default is on.
.TP
\fB-B \fInbuffers\fB\fR
Sets the number of shared buffers for use by the server
processes. The default value of this parameter is chosen
automatically by \fBinitdb\fR.
Specifying this option is equivalent to setting the
shared_buffers configuration parameter.
.TP
\fB-c \fIname\fB=\fIvalue\fB\fR
Sets a named run-time parameter. The configuration parameters
supported by PostgreSQL are
described in in the documentation. Most of the
other command line options are in fact short forms of such a
parameter assignment. \fB-c\fR can appear multiple times
to set multiple parameters.
.TP
\fB-d \fIdebug-level\fB\fR
Sets the debug level. The higher this value is set, the more
debugging output is written to the server log. Values are
from 1 to 5. It is also possible to pass -d
0 for a specific session, which will prevent the
server log level of the parent \fBpostgres\fR process from being
propagated to this session.
.TP
\fB-D \fIdatadir\fB\fR
Specifies the file system location of the data directory or
configuration file(s). See
in the documentation for details.
.TP
\fB-e\fR
Sets the default date style to ``European'', that is
DMY ordering of input date fields. This also causes
the day to be printed before the month in certain date output formats.
See in the documentation for more information.
.TP
\fB-F\fR
Disables \fBfsync\fR calls for improved
performance, at the risk of data corruption in the event of a
system crash. Specifying this option is equivalent to
disabling the fsync configuration
parameter. Read the detailed documentation before using this!
.TP
\fB-h \fIhostname\fB\fR
Specifies the IP host name or address on which
\fBpostgres\fR is to listen for TCP/IP
connections from client applications. The value can also be a
comma-separated list of addresses, or * to specify
listening on all available interfaces. An empty value
specifies not listening on any IP addresses, in which case
only Unix-domain sockets can be used to connect to the
server. Defaults to listening only on
\fBlocalhost\fR.
Specifying this option is equivalent to setting the listen_addresses configuration parameter.
.TP
\fB-i\fR
Allows remote clients to connect via TCP/IP (Internet domain)
connections. Without this option, only local connections are
accepted. This option is equivalent to setting
listen_addresses to * in
\fIpostgresql.conf\fR or via \fB-h\fR.

This option is deprecated since it does not allow access to the
full functionality of listen_addresses.
It's usually better to set listen_addresses directly.
.TP
\fB-k \fIdirectory\fB\fR
Specifies the directory of the Unix-domain socket on which
\fBpostgres\fR is to listen for
connections from client applications. The default is normally
\fI/tmp\fR, but can be changed at build time.
.TP
\fB-l\fR
Enables secure connections using SSL.
PostgreSQL must have been compiled with
support for SSL for this option to be
available. For more information on using SSL,
refer to in the documentation.
.TP
\fB-N \fImax-connections\fB\fR
Sets the maximum number of client connections that this
server will accept. The default value of this parameter is chosen
automatically by \fBinitdb\fR.
Specifying this option is equivalent to setting the
max_connections configuration parameter.
.TP
\fB-o \fIextra-options\fB\fR
The command-line-style options specified in \fIextra-options\fR are passed to
all server processes started by this
\fBpostgres\fR process. If the option string contains
any spaces, the entire string must be quoted.

The use of this option is obsolete; all command-line options
for server processes can be specified directly on the
\fBpostgres\fR command line.
.TP
\fB-p \fIport\fB\fR
Specifies the TCP/IP port or local Unix domain socket file
extension on which \fBpostgres\fR
is to listen for connections from client applications.
Defaults to the value of the \fBPGPORT\fR environment
variable, or if \fBPGPORT\fR is not set, then
defaults to the value established during compilation (normally
5432). If you specify a port other than the default port,
then all client applications must specify the same port using
either command-line options or \fBPGPORT\fR.
.TP
\fB-s\fR
Print time information and other statistics at the end of each command.
This is useful for benchmarking or for use in tuning the number of
buffers.
.TP
\fB-S \fIwork-mem\fB\fR
Specifies the amount of memory to be used by internal sorts and hashes
before resorting to temporary disk files. See the description of the
work_mem configuration parameter in in the documentation.
.TP
\fB--\fIname\fB=\fIvalue\fB\fR
Sets a named run-time parameter; a shorter form of
\fB-c\fR.
.TP
\fB--describe-config\fR
This option dumps out the server's internal configuration variables, 
descriptions, and defaults in tab-delimited \fBCOPY\fR format.
It is designed primarily for use by administration tools.
.SS "SEMI-INTERNAL OPTIONS"
.PP
The options described here are used
mainly for debugging purposes, and in some cases to assist with
recovery of severely damaged databases. There should be no reason
to use them in a production database setup. They are listed
here only for use by PostgreSQL
system developers. Furthermore, these options might
change or be removed in a future release without notice.
.TP
\fB-f { s | i | m | n | h }\fR
Forbids the use of particular scan and join methods:
s and i
disable sequential and index scans respectively, while
n, m, and h
disable nested-loop, merge and hash joins respectively.

Neither sequential scans nor nested-loop joins can be disabled
completely; the -fs and
-fn options simply discourage the optimizer
from using those plan types if it has any other alternative.
.TP
\fB-n\fR
This option is for debugging problems that cause a server
process to die abnormally. The ordinary strategy in this
situation is to notify all other server processes that they
must terminate and then reinitialize the shared memory and
semaphores. This is because an errant server process could
have corrupted some shared state before terminating. This
option specifies that \fBpostgres\fR will
not reinitialize shared data structures. A knowledgeable
system programmer can then use a debugger to examine shared
memory and semaphore state.
.TP
\fB-O\fR
Allows the structure of system tables to be modified. This is
used by \fBinitdb\fR.
.TP
\fB-P\fR
Ignore system indexes when reading system tables (but still update
the indexes when modifying the tables). This is useful when
recovering from damaged system indexes.
.TP
\fB-t pa[rser] | pl[anner] | e[xecutor]\fR
Print timing statistics for each query relating to each of the
major system modules. This option cannot be used together
with the \fB-s\fR option.
.TP
\fB-T\fR
This option is for debugging problems that cause a server
process to die abnormally. The ordinary strategy in this
situation is to notify all other server processes that they
must terminate and then reinitialize the shared memory and
semaphores. This is because an errant server process could
have corrupted some shared state before terminating. This
option specifies that \fBpostgres\fR will
stop all other server processes by sending the signal
SIGSTOP, but will not cause them to
terminate. This permits system programmers to collect core
dumps from all server processes by hand.
.TP
\fB-v \fIprotocol\fB\fR
Specifies the version number of the frontend/backend protocol
to be used for a particular session. This option is for
internal use only.
.TP
\fB-W \fIseconds\fB\fR
A delay of this many seconds occurs when a new server process
is started, after it conducts the authentication procedure.
This is intended to give an opportunity to attach to the
server process with a debugger.
.SS "OPTIONS FOR SINGLE-USER MODE"
.PP
The following options only apply to the single-user mode.
.TP
\fB--single\fR
Selects the single-user mode. This must be the first argument
on the command line.
.TP
\fB\fIdatabase\fB\fR
Specifies the name of the database to be accessed. This must be
the last argument on the command line. If it is
omitted it defaults to the user name.
.TP
\fB-E\fR
Echo all commands.
.TP
\fB-j\fR
Disables use of newline as a statement delimiter.
.TP
\fB-r \fIfilename\fB\fR
Send all server log output to \fIfilename\fR. In normal multiuser
mode, this option is ignored, and \fBstderr\fR is
used by all processes.
.SH "ENVIRONMENT"
.TP
\fBPGCLIENTENCODING\fR
Default character encoding used by clients. (The clients can
override this individually.) This value can also be set in the
configuration file.
.TP
\fBPGDATA\fR
Default data directory location
.TP
\fBPGDATESTYLE\fR
Default value of the datestyle run-time
parameter. (The use of this environment variable is deprecated.)
.TP
\fBPGPORT\fR
Default port (preferably set in the configuration file)
.TP
\fBTZ\fR
Server time zone
.SH "DIAGNOSTICS"
.PP
A failure message mentioning semget or
shmget probably indicates you need to configure your
kernel to provide adequate shared memory and semaphores. For more
discussion see in the documentation. You might be able
to postpone reconfiguring your kernel by decreasing shared_buffers to reduce the shared memory
consumption of PostgreSQL, and/or by reducing
max_connections to reduce the semaphore
consumption.
.PP
A failure message suggesting that another server is already running
should be checked carefully, for example by using the command
.sp
.nf
$ \fBps ax | grep postgres\fR
.sp
.fi
or
.sp
.nf
$ \fBps -ef | grep postgres\fR
.sp
.fi
depending on your system. If you are certain that no conflicting
server is running, you can remove the lock file mentioned in the
message and try again.
.PP
A failure message indicating inability to bind to a port might
indicate that that port is already in use by some
non-PostgreSQL process. You might also
get this error if you terminate \fBpostgres\fR
and immediately restart it using the same port; in this case, you
must simply wait a few seconds until the operating system closes
the port before trying again. Finally, you might get this error if
you specify a port number that your operating system considers to
be reserved. For example, many versions of Unix consider port
numbers under 1024 to be ``trusted'' and only permit
the Unix superuser to access them.
.SH "NOTES"
.PP
The utility command \fBpg_ctl\fR(1) can be used to
start and shut down the \fBpostgres\fR server
safely and comfortably.
.PP
If at all possible, \fBdo not\fR use
SIGKILL to kill the main
\fBpostgres\fR server. Doing so will prevent
\fBpostgres\fR from freeing the system
resources (e.g., shared memory and semaphores) that it holds before
terminating. This might cause problems for starting a fresh
\fBpostgres\fR run.
.PP
To terminate the \fBpostgres\fR server normally, the
signals SIGTERM, SIGINT, or
SIGQUIT can be used. The first will wait for
all clients to terminate before quitting, the second will
forcefully disconnect all clients, and the third will quit
immediately without proper shutdown, resulting in a recovery run
during restart.
.PP
The SIGHUP signal will reload
the server configuration files. It is also possible to send
SIGHUP to an individual server process, but that
is usually not sensible.
.PP
To cancel a running query, send the SIGINT signal
to the process running that command.
.PP
The \fBpostgres\fR server uses SIGTERM
to tell subordinate server processes to quit normally and
SIGQUIT to terminate without the normal cleanup.
These signals \fBshould not\fR be used by users. It
is also unwise to send SIGKILL to a server
process \(em the main \fBpostgres\fR process will
interpret this as a crash and will force all the sibling processes
to quit as part of its standard crash-recovery procedure.
.SH "BUGS"
.PP
The \fB--\fR options will not work on \fBFreeBSD\fR or \fBOpenBSD\fR.
Use \fB-c\fR instead. This is a bug in the affected operating
systems; a future release of PostgreSQL
will provide a workaround if this is not fixed.
.SH "USAGE"
.PP
To start a single-user mode server, use a command like
.sp
.nf
\fBpostgres --single -D /usr/local/pgsql/data \fIother-options\fB my_database\fR
.sp
.fi
Provide the correct path to the database directory with \fB-D\fR, or
make sure that the environment variable \fBPGDATA\fR is set.
Also specify the name of the particular database you want to work in.
.PP
Normally, the single-user mode server treats newline as the command
entry terminator; there is no intelligence about semicolons,
as there is in \fBpsql\fR. To continue a command
across multiple lines, you must type backslash just before each
newline except the last one.
.PP
But if you use the \fB-j\fR command line switch, then newline does
not terminate command entry. In this case, the server will read the standard input
until the end-of-file (EOF) marker, then
process the input as a single command string. Backslash-newline is not
treated specially in this case.
.PP
To quit the session, type EOF
(\fBControl\fR+\fBD\fR, usually).
If you've
used \fB-j\fR, two consecutive EOFs are needed to exit.
.PP
Note that the single-user mode server does not provide sophisticated
line-editing features (no command history, for example).
.SH "EXAMPLES"
.PP
To start \fBpostgres\fR in the background
using default values, type:
.sp
.nf
$ \fBnohup postgres >logfile 2>&1 </dev/null &\fR
.sp
.fi
.PP
To start \fBpostgres\fR with a specific
port:
.sp
.nf
$ \fBpostgres -p 1234\fR
.sp
.fi
This command will start up \fBpostgres\fR
communicating through the port 1234. In order to connect to this
server using \fBpsql\fR, you would need to run it as
.sp
.nf
$ \fBpsql -p 1234\fR
.sp
.fi
or set the environment variable \fBPGPORT\fR:
.sp
.nf
$ \fBexport PGPORT=1234\fR
$ \fBpsql\fR
.sp
.fi
.PP
Named run-time parameters can be set in either of these styles:
.sp
.nf
$ \fBpostgres -c work_mem=1234\fR
$ \fBpostgres --work-mem=1234\fR
.sp
.fi
Either form overrides whatever setting might exist for
work_mem in \fIpostgresql.conf\fR. Notice that
underscores in parameter names can be written as either underscore
or dash on the command line. Except for short-term experiments,
it's probably better practice to edit the setting in
\fIpostgresql.conf\fR than to rely on a command-line switch
to set a parameter.
.SH "SEE ALSO"
.PP
\fBinitdb\fR(1),
\fBpg_ctl\fR(1)
